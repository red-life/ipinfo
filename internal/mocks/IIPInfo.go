// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	net "net"

	mock "github.com/stretchr/testify/mock"

	ports "github.com/red-life/ipinfo/internal/ports"
)

// IIPInfo is an autogenerated mock type for the IIPInfo type
type IIPInfo struct {
	mock.Mock
}

type IIPInfo_Expecter struct {
	mock *mock.Mock
}

func (_m *IIPInfo) EXPECT() *IIPInfo_Expecter {
	return &IIPInfo_Expecter{mock: &_m.Mock}
}

// GetInfo provides a mock function with given fields: ip
func (_m *IIPInfo) GetInfo(ip net.IP) (ports.Info, error) {
	ret := _m.Called(ip)

	var r0 ports.Info
	var r1 error
	if rf, ok := ret.Get(0).(func(net.IP) (ports.Info, error)); ok {
		return rf(ip)
	}
	if rf, ok := ret.Get(0).(func(net.IP) ports.Info); ok {
		r0 = rf(ip)
	} else {
		r0 = ret.Get(0).(ports.Info)
	}

	if rf, ok := ret.Get(1).(func(net.IP) error); ok {
		r1 = rf(ip)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IIPInfo_GetInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInfo'
type IIPInfo_GetInfo_Call struct {
	*mock.Call
}

// GetInfo is a helper method to define mock.On call
//   - ip net.IP
func (_e *IIPInfo_Expecter) GetInfo(ip interface{}) *IIPInfo_GetInfo_Call {
	return &IIPInfo_GetInfo_Call{Call: _e.mock.On("GetInfo", ip)}
}

func (_c *IIPInfo_GetInfo_Call) Run(run func(ip net.IP)) *IIPInfo_GetInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(net.IP))
	})
	return _c
}

func (_c *IIPInfo_GetInfo_Call) Return(_a0 ports.Info, _a1 error) *IIPInfo_GetInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IIPInfo_GetInfo_Call) RunAndReturn(run func(net.IP) (ports.Info, error)) *IIPInfo_GetInfo_Call {
	_c.Call.Return(run)
	return _c
}

// NewIIPInfo creates a new instance of IIPInfo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIIPInfo(t interface {
	mock.TestingT
	Cleanup(func())
}) *IIPInfo {
	mock := &IIPInfo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
